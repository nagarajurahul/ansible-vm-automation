---
# https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html

# Note: Can be also installed using Helm chart

- name: Create a Namespace for ArgoCD
  kubernetes.core.k8s:
    name: argocd
    api_version: v1
    kind: Namespace
    state: present
    kubeconfig: "{{ kubeconfig_path }}"

- name: Download ArgoCD manifests
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    dest: /tmp/argocd-install.yaml

- name: Apply ArgoCD YAML
  kubernetes.core.k8s:
    src: /tmp/argocd-install.yaml
    state: present
    namespace: argocd
    kubeconfig: "{{ kubeconfig_path }}"

- name: Wait 1 minute
  ansible.builtin.pause:
    seconds: 60




- name: Get ArgoCD pods
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: argocd
    kubeconfig: "{{ kubeconfig_path }}"
  register: argocd_pods

# - name: Wait till each ArgoCD pod is Running & Ready
#   kubernetes.core.k8s_info:
#     kind: Pod
#     wait: yes
#     name: "{{ item.metadata.name }}"
#     namespace: argocd
#     kubeconfig: "{{ kubeconfig_path }}"
#   loop: "{{ argocd_pods.resources }}"
#   register: pod_status
#   until: >
#     pod_status.results[ansible_loop.index0].resources[0].status.phase == "Running"
#     and
#     (
#       pod_status.results[ansible_loop.index0].resources[0].status.containerStatuses
#       | selectattr('ready', 'equalto', true)
#       | list
#       | length
#     ) == (pod_status.results[ansible_loop.index0].resources[0].status.containerStatuses | length)
#   retries: 30
#   delay: 5
#   changed_when: false



- name: Copy ArgoCD CLI install script
  ansible.builtin.copy:
    src: files/install-argocd-cli.sh
    dest: /tmp/install-argocd-cli.sh
    mode: "0755"

- name: Run script to install ArgoCD CLI
  ansible.builtin.command: /tmp/install-argocd-cli.sh
  register: argocd_cli_install_output
  changed_when: false

# - name: Assert ArgoCD installation was successful
#   ansible.builtin.assert:
#     that:
#       - "'successfully' in argocd_cli_install_output.stdout"



# Wait for the ArgoCD initial-admin-secret to exist
- name: Wait for ArgoCD admin secret to be created
  ansible.builtin.command: >
    kubectl -n argocd get secret argocd-initial-admin-secret
  register: argocd_secret_check
  until: argocd_secret_check.rc == 0
  retries: 10 # retries every 15 s
  delay: 15
  changed_when: false

# kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
# argocd admin initial-password -n argocd
- name: Get ArgoCD server secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: argocd
    name: argocd-initial-admin-secret
    kubeconfig: "{{ kubeconfig_path }}"
  register: argocd_secret

- name: Set ArgoCD admin password fact
  ansible.builtin.set_fact:
    argocd_initial_password: "{{ argocd_secret.resources[0].data.password | b64decode }}"

- name: Patch ArgoCD server to NodePort
  ansible.builtin.command: >
    kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Get ArgoCD server service
  kubernetes.core.k8s_info:
    kind: Service
    namespace: argocd
    name: argocd-server
    kubeconfig: "{{ kubeconfig_path }}"
  register: argocd_svc_info

- name: Set ArgoCD server port fact 
  ansible.builtin.set_fact:
    argocd_server_port: "{{ argocd_svc_info.resources[0].spec.ports[0].nodePort }}"

- name: Get ArgoCD server pod
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: argocd
    label_selectors:
      - app.kubernetes.io/name=argocd-server
    kubeconfig: "{{ kubeconfig_path }}"
  register: argocd_pod_info

# Note: argocd_server_ip can be set to the IP of any worker node
# This will dynamically set the IP of the node where the ArgoCD server pod is running
- name: Set argocd_server_ip to node where pod runs
  set_fact:
    argocd_server_ip: "{{ hostvars[argocd_pod_info.resources[0].spec.nodeName].ansible_host }}"

- name: Wait 1 minute
  ansible.builtin.pause:
    seconds: 60




- name: Login to ArgoCD CLI
  ansible.builtin.command: >
    argocd login {{ argocd_server_ip }}:{{ argocd_server_port }}
    --username admin
    --password "{{ argocd_initial_password }}"
    --insecure --grpc-web
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: argocd_login_output

- name: Update password for admin user
  ansible.builtin.command: >
    argocd account update-password
    --account admin
    --current-password "{{ argocd_initial_password }}"
    --new-password "{{ argocd_admin_password }}"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: argocd_update_password_output

# Check this
# Uncomment if needed to patch ArgoCD server service back to ClusterIP
# - name: Patch ArgoCD server service back to ClusterIP
#   ansible.builtin.command: >
#     kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "ClusterIP"}}'
#   environment:
#     KUBECONFIG: "{{ kubeconfig_path }}"




# Note: Can be also installed using Helm chart
- name: Download ArgoCD Image Updater manifests
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/argoproj-labs/argocd-image-updater/stable/manifests/install.yaml
    dest: /tmp/argocd-image-updater.yaml

- name: Apply ArgoCD Image Updater manifests
  kubernetes.core.k8s:
    src: /tmp/argocd-image-updater.yaml
    state: present
    namespace: argocd
    kubeconfig: "{{ kubeconfig_path }}"

# Note: The following tasks are commented out as they are not needed for the current setup.
# They can be uncommented if you want to create a ConfigMap for ArgoCD Image Updater.
# - name: Create ArgoCD Image Updater ConfigMap
#   kubernetes.core.k8s:
#     state: present
#     kubeconfig: "{{ kubeconfig_path }}"
#     definition:
#       apiVersion: v1
#       kind: ConfigMap
#       metadata:
#         name: argocd-image-updater-cm
#         namespace: argocd
#       data:
#         config: |
#           imageUpdater:
#             repositories:
#               - name: github
#                 type: git
#                 url: "{{ github_gitops_repo_ssh_url }}"
#                 sshPrivateKeySecret: github-ssh-creds
#                 imageUpdater:
#                   enabled: true
#                   updateStrategy: latest
#                   updateMethod: latest
#                   updateInterval: 1h
#                   updateOnDeploy: true
#                   updateOnSync: true
#                   updateOnStartup: true
#                   updateOnImageChange: true
#                   updateOnImagePull: true
#                   updateOnImageTagChange: true
#                   updateOnImageDigestChange: true
#                   updateOnImageRepositoryChange: true
#                   updateOnImageRepositoryTagChange: true
#                   updateOnImageRepositoryDigestChange: true
#                   updateOnImageRepositoryTagChange: true

- name: Get ArgoCD Image Updater pods
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: argocd
    label_selectors:
      - app.kubernetes.io/name=argocd-image-updater
    kubeconfig: "{{ kubeconfig_path }}"
  register: argocd_image_updater_pods
