# https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
- name: Create a Namespace for ArgoCD
  kubernetes.core.k8s:
    name: argocd
    api_version: v1
    kind: Namespace
    state: present

- name: Download ArgoCD manifests
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    dest: /tmp/argocd-install.yaml

- name: Apply ArgoCD manifests
  kubernetes.core.k8s:
    src: /tmp/argocd-install.yaml
    state: present



- name: Get the list of ArgoCD pods in the argocd namespace
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: argocd
  register: argocd_pods

- name: Wait till the Pods are running
  kubernetes.core.k8s_info:
    kind: Pod
    wait: yes
    name: "{{ item.metadata.name }}"
    namespace: argocd
    register: pod_status
    until: pod_status.resources[0].status.phase == "Running"
    retries: 30
    delay: 5
    loop: "{{ argocd_pods.resources }}"



- name: Copy ArgoCD CLI install script
  ansible.builtin.copy:
    src: files/argocd_install.sh
    dest: /usr/local/bin/argocd_install.sh
    mode: '0755'

- name: Run script to install ArgoCD CLI 
  ansible.builtin.command: /usr/local/bin/argocd_install.sh
  register: argocd_install_output
  changed_when: false

# - name: Assert ArgoCD installation was successful
#   ansible.builtin.assert:
#     that:
#       - "'successfully' in argocd_install_output.stdout"



# kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

- name: Get ArgoCD server secret
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: argocd
    name: argocd-initial-admin-secret
  register: argocd_secret

- name: Set ArgoCD admin password fact
  ansible.builtin.set_fact:
    argocd_old_password: "{{ argocd_secret.resources[0].data.password | b64decode }}"



- name: Login to ArgoCD server
  ansible.builtin.command: >
    argocd login --insecure --grpc-web
    --username admin
    --password "{{ argocd_old_password }}"
    --server localhost:8080
  environment:
    KUBECONFIG: /home/ubuntu/.kube/config
  register: login_output