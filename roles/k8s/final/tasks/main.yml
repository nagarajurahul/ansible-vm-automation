---
- name: Install required packages for Kubernetes
  ansible.builtin.package:
    name: 
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes
  become: true

- name: Create directory for APT keyrings
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
    force: no
  become: true

- name: Add Kubernetes GPG key
  ansible.builtin.apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    mode: '0644'
    state: present
  become: true

- name: Add Kubernetes repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /"
    state: present
  become: true



- name: Update APT cache
  ansible.builtin.apt:
    update_cache: yes
  become: true

- name: Install Kubernetes components
  ansible.builtin.package:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes
  when: "'masters' in group_names"
  become: true

- name: Mark Kubernetes packages to hold
  ansible.builtin.apt_mark:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: hold
  when: "'masters' in group_names"
  become: true  

- name: Install Kubernetes components
  ansible.builtin.package:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes
  when: "'workers' in group_names"
  become: true


- name: Mark Kubernetes packages to hold
  ansible.builtin.apt_mark:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: hold
  when: "'workers' in group_names"
  become: true  

- name: Enable and start kubelet service
  ansible.builtin.systemd:
    name: kubelet
    state: started
    enabled: true
  register: kubelet_status
  become: true


- name: Generate kubeadm init config file from template
  ansible.builtin.template:
    src: templates/kubeadm-config.yaml.j2
    dest: /tmp/kubeadm-config.yaml
  become: true
  when: "'masters' in group_names"

- name: Initialize Kubernetes control-plane with kubeadm config
  ansible.builtin.command: kubeadm init --config=/tmp/kubeadm-config.yaml
  register: kubeadm_init_output
  become: true
  when: "'masters' in group_names"

- name: Save join command for worker nodes
  ansible.builtin.shell: |
    echo "{{ kubeadm_init_output.stdout_lines | select('search', 'kubeadm join') | list | join('\n') }}" > /join-command.txt
  args:
    executable: /bin/bash
  when: "'masters' in group_names"

- name: Copy kubeconfig setup script to control plane node
  ansible.builtin.copy:
    src: files/setup_kubectl.sh
    dest: /usr/local/bin/setup_kubectl.sh
    owner: root
    group: root
    mode: '0755'
  become: true
  when: "'masters' in group_names"

- name: Configure kubectl for the control plane node
  ansible.builtin.command: /usr/local/bin/setup_kubectl.sh
  become: true
  become_user: "{{ master_user }}"
  when: "'masters' in group_names"

- name: Apply Flannel CNI plugin
  ansible.builtin.command: >
    kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
  become: true
  become_user: ubuntu
  when: "'masters' in group_names"

- name: Wait for all system pods to be Ready
  ansible.builtin.command: >
    kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=180s
  become: true
  become_user: ubuntu
  when: "'masters' in group_names"


- name: Get kubeadm join command from master
  ansible.builtin.command: kubeadm token create --print-join-command
  register: join_cmd
  become: true
  when: "'masters' in group_names"
  run_once: true  # Only fetch once even if multiple masters